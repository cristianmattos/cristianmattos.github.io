
    // Configura√ß√£o √∫nica de idiomas com todas as informa√ß√µes
    const IDIOMAS_CONFIG = {
      'pt': { nome: 'Portugu√™s', bandeira: 'üáßüá∑', dir: 'ltr', lang: 'pt-BR', fallback: null },
      'en': { nome: 'English', bandeira: 'üá∫üá∏', dir: 'ltr', lang: 'en-US', fallback: 'pt' },
      'es': { nome: 'Espa√±ol', bandeira: 'üá™üá∏', dir: 'ltr', lang: 'es', fallback: 'en' },
      'fr': { nome: 'Fran√ßais', bandeira: 'üá´üá∑', dir: 'ltr', lang: 'fr', fallback: 'en' },
      'de': { nome: 'Deutsch', bandeira: 'üá©üá™', dir: 'ltr', lang: 'de', fallback: 'en' },
      'it': { nome: 'Italiano', bandeira: 'üáÆüáπ', dir: 'ltr', lang: 'it', fallback: 'en' },
      'ja': { nome: 'Êó•Êú¨Ë™û', bandeira: 'üáØüáµ', dir: 'ltr', lang: 'ja', fallback: 'en' },
      'ko': { nome: 'ÌïúÍµ≠Ïñ¥', bandeira: 'üá∞üá∑', dir: 'ltr', lang: 'ko', fallback: 'en' },
      'zh': { nome: '‰∏≠Êñá', bandeira: 'üá®üá≥', dir: 'ltr', lang: 'zh', fallback: 'en' },
      'ru': { nome: '–†—É—Å—Å–∫–∏–π', bandeira: 'üá∑üá∫', dir: 'ltr', lang: 'ru', fallback: 'en' },
      'nl': { nome: 'Nederlands', bandeira: 'üá≥üá±', dir: 'ltr', lang: 'nl', fallback: 'en' },
      'sv': { nome: 'Svenska', bandeira: 'üá∏üá™', dir: 'ltr', lang: 'sv', fallback: 'en' },
      'pl': { nome: 'Polski', bandeira: 'üáµüá±', dir: 'ltr', lang: 'pl', fallback: 'en' },
      'fi': { nome: 'Suomi', bandeira: 'üá´üáÆ', dir: 'ltr', lang: 'fi', fallback: 'en' },
      'no': { nome: 'Norsk', bandeira: 'üá≥üá¥', dir: 'ltr', lang: 'no', fallback: 'en' },
      'da': { nome: 'Dansk', bandeira: 'üá©üá∞', dir: 'ltr', lang: 'da', fallback: 'en' },
      'hu': { nome: 'Magyar', bandeira: 'üá≠üá∫', dir: 'ltr', lang: 'hu', fallback: 'en' },
      'cs': { nome: 'ƒåe≈°tina', bandeira: 'üá®üáø', dir: 'ltr', lang: 'cs', fallback: 'en' },
      'sk': { nome: 'Slovenƒçina', bandeira: 'üá∏üá∞', dir: 'ltr', lang: 'sk', fallback: 'en' },
      'vi': { nome: 'Ti·∫øng Vi·ªát', bandeira: 'üáªüá≥', dir: 'ltr', lang: 'vi', fallback: 'en' },
      'id': { nome: 'Bahasa Indonesia', bandeira: 'üáÆüá©', dir: 'ltr', lang: 'id', fallback: 'en' },
      'ms': { nome: 'Bahasa Melayu', bandeira: 'üá≤üáæ', dir: 'ltr', lang: 'ms', fallback: 'en' },
      'tr': { nome: 'T√ºrk√ße', bandeira: 'üáπüá∑', dir: 'ltr', lang: 'tr', fallback: 'en' },
      'el': { nome: 'ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨', bandeira: 'üá¨üá∑', dir: 'ltr', lang: 'el', fallback: 'en' },
      'ro': { nome: 'Rom√¢nƒÉ', bandeira: 'üá∑üá¥', dir: 'ltr', lang: 'ro', fallback: 'en' },
      'hi': { nome: '‡§π‡§ø‡§Ç‡§¶‡•Ä', bandeira: 'üáÆüá≥', dir: 'ltr', lang: 'hi', fallback: 'en' },
      // Idiomas RTL
      'ar': { nome: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', bandeira: 'üá∏üá¶', dir: 'rtl', lang: 'ar', fallback: 'en' },
      'he': { nome: '◊¢◊ë◊®◊ô◊™', bandeira: 'üáÆüá±', dir: 'rtl', lang: 'he', fallback: 'en' },
      'fa': { nome: 'ŸÅÿßÿ±ÿ≥€å', bandeira: 'üáÆüá∑', dir: 'rtl', lang: 'fa', fallback: 'en' },
      'ur': { nome: 'ÿßÿ±ÿØŸà', bandeira: 'üáµüá∞', dir: 'rtl', lang: 'ur', fallback: 'en' }
    };

    let idiomaAtual = 'pt';
    let traducaoCache = {};

    // Fun√ß√£o para detectar o idioma do navegador
    function detectarIdioma() {
      const idiomaBasico = (navigator.language || navigator.userLanguage).split('-')[0].toLowerCase();
      console.log('Idioma do navegador detectado:', idiomaBasico);

      // Retorna o idioma se suportado, sen√£o retorna portugu√™s
      return IDIOMAS_CONFIG[idiomaBasico] ? idiomaBasico : 'pt';
    }

    // Fun√ß√£o para mostrar/esconder indicador de carregamento
    function mostrarCarregamento(mostrar) {
      const indicator = document.getElementById('loading-indicator');
      indicator.style.display = mostrar ? 'block' : 'none';
    }

    // Fun√ß√£o para atualizar lang e dir do HTML
    function atualizarDirecaoHTML(idioma) {
      const htmlElement = document.getElementById('html-element');
      const bodyElement = document.body;
      const config = IDIOMAS_CONFIG[idioma];


      if (config) {
        // Atualiza o lang do HTML
        htmlElement.setAttribute('lang', config.lang);

        // Atualiza a dire√ß√£o do texto
        htmlElement.setAttribute('dir', config.dir);
        bodyElement.setAttribute('dir', config.dir);

        console.log(`Idioma alterado para: ${config.lang}, Dire√ß√£o: ${config.dir}`);
      } else {
        console.warn(`Configura√ß√£o n√£o encontrada para idioma: ${idioma}`);
        // Fallback para LTR
        htmlElement.setAttribute('lang', idioma);
        htmlElement.setAttribute('dir', 'ltr');
        bodyElement.setAttribute('dir', 'ltr');
      }
    }

    // Fun√ß√£o para carregar as tradu√ß√µes com cache
    async function carregarTraducoes(idioma) {
      // Verifica se j√° est√° em cache
      if (traducaoCache[idioma]) {
        console.log(`Tradu√ß√µes do cache para ${idioma}`);
        return traducaoCache[idioma];
      }

      try {
        mostrarCarregamento(true);
        console.log(`Carregando tradu√ß√µes para ${idioma}...`);

        const response = await fetch(`./api/${idioma}.json`);
        if (!response.ok) {
          throw new Error(`Erro ${response.status} ao carregar ${idioma}.json`);
        }

        const traducoes = await response.json();
        console.log(`Tradu√ß√µes carregadas para ${idioma}:`, traducoes);

        // Salva no cache
        traducaoCache[idioma] = traducoes;
        return traducoes;

      } catch (error) {
        console.error(`Erro ao carregar tradu√ß√µes para ${idioma}:`, error);

        // Tenta fallback
        const fallback = IDIOMAS_CONFIG[idioma]?.fallback;
        if (fallback && fallback !== idioma) {
          console.log(`Tentando fallback para ${fallback}`);
          return await carregarTraducoes(fallback);
        }

        return null;
      } finally {
        mostrarCarregamento(false);
      }
    }

    // Fun√ß√£o para aplicar as tradu√ß√µes na p√°gina
    function aplicarTraducoes(traducoes) {
      console.log('Aplicando tradu√ß√µes:', traducoes);

      // T√≠tulo da introdu√ß√£o
      const introTitle = document.getElementById('intro-title');
      if (introTitle) {
        const title = traducoes.intro?.title || 'Desenvolvedor Front End & UX/UI Designer';
        introTitle.textContent = title;
      }

      // Localiza√ß√£o
      const introLocation = document.getElementById('intro-location');
      if (introLocation) {
        const location = traducoes.intro?.location || 'Local capital de S√£o Paulo üìç';
        introLocation.textContent = location;
      }

      // Menu de navega√ß√£o
      const navExperience = document.getElementById('nav-experience');
      const navEducation = document.getElementById('nav-education');
      const navContact = document.getElementById('nav-contact');

      const navData = traducoes.nav || {};
      const menuData = traducoes.header?.menu || [];

      if (navExperience) {
        navExperience.textContent = navData.experience || menuData[0]?.label || 'Experi√™ncia';
      }
      if (navEducation) {
        navEducation.textContent = navData.education || menuData[1]?.label || 'Forma√ß√£o';
      }
      if (navContact) {
        navContact.textContent = navData.contact || menuData[2]?.label || 'Contato';
      }

      // Se√ß√£o de Experi√™ncia
      const experienceTitle = document.getElementById('experience-title');
      if (experienceTitle) {
        experienceTitle.textContent = traducoes.experience?.sectionTitle || 'Experi√™ncia';
      }

      const experienceText = document.getElementById('experience-text');
      if (experienceText) {
        const text = traducoes.experience?.text || traducoes.experiencia?.descricao || experienceText.innerHTML;
        experienceText.innerHTML = text;
      }

      // Projetos - CORRIGIDO: Agora traduz t√≠tulos, tecnologias e descri√ß√µes
      const projectTitles = ['project-title-1', 'project-title-2', 'project-title-3'];
      const techLabels = ['tech-label-1', 'tech-label-2', 'tech-label-3'];
      const projectDescs = ['project-desc-1', 'project-desc-2', 'project-desc-3'];
      const projects = traducoes.experience?.projects || traducoes.experiencia?.projetos || [];

      projects.forEach((project, index) => {
        if (index < projectTitles.length) {
          // Traduzir t√≠tulo do projeto
          const projectTitle = document.getElementById(projectTitles[index]);
          if (projectTitle && project.name) {
            projectTitle.textContent = project.name;
          }

          // Traduzir label "Tecnologias"
          const techLabel = document.getElementById(techLabels[index]);
          if (techLabel) {
            techLabel.textContent = project.technologies || 'Tecnologias';
          }

          // Traduzir descri√ß√£o do projeto
          const projectDesc = document.getElementById(projectDescs[index]);
          if (projectDesc) {
            projectDesc.textContent = project.description || project.descricao || '';
          }
        }
      });

      // Se√ß√£o de Forma√ß√£o
      const educationTitle = document.getElementById('education-title');
      if (educationTitle) {
        educationTitle.textContent = traducoes.education?.sectionTitle || 'Forma√ß√£o';
      }

      const educationText = document.getElementById('education-text');
      if (educationText) {
        const text = traducoes.education?.text || traducoes.formacao?.descricao || educationText.innerHTML;
        educationText.innerHTML = text;
      }

      // Tipos de forma√ß√£o e cursos - CORRIGIDO
      const degreeTypes = ['degree-type-1', 'degree-type-2', 'degree-type-3'];
      const courseTitles = ['course-title-1', 'course-title-3']; // S√≥ o primeiro e terceiro t√™m IDs
      const courseIndices = [0, 2]; // √çndices correspondentes no array
      const schools = traducoes.education?.schools || traducoes.formacao?.cursos || [];

      schools.forEach((school, index) => {
        // Traduzir tipos de forma√ß√£o
        if (index < degreeTypes.length) {
          const degreeType = document.getElementById(degreeTypes[index]);
          if (degreeType) {
            degreeType.textContent = school.type || school.tipo || '';
          }
        }

        // Traduzir t√≠tulos dos cursos (primeiro e terceiro)
        const courseIndex = courseIndices.indexOf(index);
        if (courseIndex !== -1) {
          const courseElement = document.getElementById(courseTitles[courseIndex]);
          if (courseElement && school.course) {
            courseElement.textContent = school.course;
          }
        }
      });

      // Segundo curso (que tem ID espec√≠fico)
      const degreeCourse2 = document.getElementById('degree-course-2');
      if (degreeCourse2 && schools[1]) {
        degreeCourse2.textContent = schools[1].course || schools[1].curso || degreeCourse2.textContent;
      }

      // T√≠tulo dos cursos intensivos
      const intensiveCoursesTitle = document.getElementById('intensive-courses-title');
      if (intensiveCoursesTitle) {
        intensiveCoursesTitle.textContent = traducoes.education?.extra?.intensiveCoursesTitle || 'Cursos Intensivos';
      }

      // Lista de cursos intensivos - CORRIGIDO
      const intensiveCourses = traducoes.education?.extra?.courses || [];
      if (intensiveCourses.length > 0) {
        intensiveCourses.forEach((course, index) => {
          const courseElement = document.getElementById(`intensive-course-${index + 1}`);
          if (courseElement) {
            courseElement.innerHTML = course;
          }
        });
      }

      // Footer
      const footerText = document.getElementById('footer-text');
      if (footerText) {
        const text = traducoes.footer?.text || traducoes.contato?.mensagem || footerText.textContent;
        footerText.textContent = text;
      }

      // Atualiza o lang e dir do HTML
      atualizarDirecaoHTML(idiomaAtual);

      console.log('Tradu√ß√µes aplicadas com sucesso!');
    }

    // Fun√ß√£o para trocar idioma
    async function trocarIdioma(novoIdioma) {
      if (novoIdioma === 'auto') {
        novoIdioma = detectarIdioma();
      }

      if (novoIdioma === idiomaAtual) {
        console.log('Idioma j√° est√° ativo:', novoIdioma);
        return;
      }

      console.log(`Trocando idioma de ${idiomaAtual} para ${novoIdioma}`);

      try {
        const traducoes = await carregarTraducoes(novoIdioma);

        if (traducoes) {
          idiomaAtual = novoIdioma;
          aplicarTraducoes(traducoes);

          // Atualiza o seletor
          const selector = document.getElementById('language-selector');
          selector.value = novoIdioma;

          // Salva prefer√™ncia
          localStorage.setItem('idioma-preferido', novoIdioma);

        } else {
          console.error('N√£o foi poss√≠vel carregar as tradu√ß√µes');
        }
      } catch (error) {
        console.error('Erro ao trocar idioma:', error);
      }
    }

    // Fun√ß√£o para abrir links em nova aba
    function abrirEmNovaAba(url) {
  window.open(`https://cristianmattos.github.io/${url}`, '_blank');
      
    }

    // Fun√ß√£o principal de inicializa√ß√£o
    async function inicializar() {
      try {
        // Verifica se h√° idioma salvo
        const idiomaSalvo = localStorage.getItem('idioma-preferido');
        const idioma = idiomaSalvo || detectarIdioma();

        console.log('Inicializando com idioma:', idioma);


        // const optionAperecer = document.querySelector(`#language-selector option[value="${detectarIdioma()}"]`);
        // optionAperecer.style.display = 'block'
        // console.log( optionAperecer)


        // Configura o seletor
        const selector = document.getElementById('language-selector');
        selector.value = idioma;

        // Adiciona evento ao seletor
        selector.addEventListener('change', (e) => {
          trocarIdioma(e.target.value);
        });

        // Carrega tradu√ß√µes iniciais
        await trocarIdioma(idioma);

      } catch (error) {
        console.error('Erro na inicializa√ß√£o:', error);
      }
    }

    // Aguarda o DOM carregar
    document.addEventListener('DOMContentLoaded', inicializar);

    // Exp√µe fun√ß√£o para debug
    window.trocarIdioma = trocarIdioma;
